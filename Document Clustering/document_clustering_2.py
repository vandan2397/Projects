# -*- coding: utf-8 -*-
"""Document_clustering 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Qx3RmKipMNu9yJx5bSOva7eRcsduLuq
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

pip install scikit-learn

from __future__ import print_function

import logging
import numpy as np
from optparse import OptionParser
import sys
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import HashingVectorizer
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.linear_model import RidgeClassifier
from sklearn.pipeline import Pipeline
from sklearn.svm import LinearSVC
from sklearn.linear_model import SGDClassifier
from sklearn.linear_model import Perceptron
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import NearestNeighbors
from sklearn.neighbors import NearestCentroid
from sklearn.ensemble import RandomForestClassifier
from sklearn.utils.extmath import density
from sklearn import metrics
from sklearn.cluster import DBSCAN

# remove = ('headers', 'footers', 'quotes')
remove=()
data_train = fetch_20newsgroups(subset='train', shuffle=True, random_state=42, remove=remove)

data_test = fetch_20newsgroups(subset='test', shuffle=True, random_state=42, remove=remove)

target_names = data_train.target_names

y_train, y_test = data_train.target, data_test.target

# vectorizer = TfidfVectorizer(sublinear_tf=True, max_df=0.5, stop_words='english')
# X_train = vectorizer.fit_transform(data_train.data)

vectorizer = HashingVectorizer(stop_words='english', alternate_sign=False, n_features=1048576)
X_train = vectorizer.transform(data_train.data)
X_test = vectorizer.transform(data_test.data)
# feature_names = vectorizer.get_feature_names()

ch2 = SelectKBest(chi2, k=75000)
X_train = ch2.fit_transform(X_train, y_train)
X_test = ch2.transform(X_test)
# feature_names = [feature_names[i] for i in ch2.get_support(indices=True)]

clf=KNeighborsClassifier(n_neighbors=9)
clf.fit(X_train, y_train)
pred = clf.predict(X_test)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)

print(metrics.classification_report(y_test, pred,target_names=target_names))
print(metrics.confusion_matrix(y_test, pred))

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB(alpha=.01)
clf.fit(X_train, y_train)
pred = clf.predict(X_test)
print(pred)
print(metrics.accuracy_score(y_test, pred))

from sklearn.cluster import KMeans
import collections
clf = KMeans(n_clusters=20, random_state=1, n_init=10, max_iter=300)
clf.fit(X_train, y_train)
pred = clf.predict(X_test)

temp_list = list(clf.labels_)
print(temp_list)

dic = {}
for item in temp_list:
  if(item not in dic.keys()):
    dic[item]=1
  else:
    dic[item]+=1
dic = dict(collections.OrderedDict(sorted(dic.items())))
print(dic)

import collections
clf = DBSCAN(eps=0.6, min_samples=4, n_jobs=-1).fit(X_train, y_train)
temp_list = list(clf.labels_)
print(temp_list)

dic = {}
for item in temp_list:
  if(item not in dic.keys()):
    dic[item]=1
  else:
    dic[item]+=1
dic = dict(collections.OrderedDict(sorted(dic.items())))
print(dic)